[build-system]
requires = ["setuptools", "lsst-versions >= 1.3.0"]
build-backend = "setuptools.build_meta"

[project]
name = "lsst-dax-apdb-admin"
description = "Data management tools for Alert Products Database."
license = {text = "GPLv3+ License"}
readme = "README.rst"
authors = [
    {name="Rubin Observatory Data Management", email="dm-admin@lists.lsst.org"},
]
classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Astronomy",
]
keywords = ["lsst"]
dependencies = [
    "lsst-dax-apdb",
    "lsst-daf-butler",
    "astropy",
    "pandas",
]
dynamic = ["version"]

[project.urls]
"Homepage" = "https://github.com/lsst-dm/dax_apdb_admin"

[project.optional-dependencies]
test = [
    "pytest >= 3.2",
    "flake8 >= 3.7.5",
    "pytest-flake8 >= 1.0.4",
    "pytest-openfiles >= 0.5.0"
]
postgres = ["psycopg2"]
cassandra = ["cassandra-driver"]

[tool.setuptools.packages.find]
where = ["python"]

[tool.setuptools]
zip-safe = true
license-files = ["COPYRIGHT", "LICENSE"]

[tool.setuptools.package-data]
"lsst.dax.apdb_admin" = ["py.typed"]

[tool.setuptools.dynamic]
version = { attr = "lsst_versions.get_lsst_version" }

[project.scripts]
apdb-admin = "lsst.dax.apdb_admin.cli.apdb_admin_cli:main"

[tool.black]
line-length = 110
target-version = ["py312"]

[tool.isort]
profile = "black"
line_length = 110

[tool.lsst_versions]
write_to = "python/lsst/dax/apdb_admin/version.py"

[tool.ruff]
line-length = 110
target-version = "py312"
exclude = [
    "__init__.py",
    "doc/conf.py",
]

[tool.ruff.lint]
ignore = [
    "N802",
    "N803",
    "N806",
    "N812",
    "N815",
    "N816",
    "N999",
    "D107",
    "D105",
    "D102",
    "D104",
    "D100",
    "D200",
    "D205",
    "D400",
]
select = [
    "E",  # pycodestyle
    "F",  # pycodestyle
    "N",  # pep8-naming
    "W",  # pycodestyle
    "D",  # pydocstyle
    "UP", # pyupgrade
    "C4", # flake8-comprehensions
    "I",  # isort
    "RUF022",  # sort __all__
]
extend-select = [
    "RUF100", # Warn about unused noqa
]

[tool.ruff.lint.per-file-ignores]

[tool.ruff.lint.isort]
known-first-party = ["lsst"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 79

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.format]
docstring-code-format = true
# Formatter does not know about indenting.
docstring-code-line-length = 69

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.numpydoc_validation]
checks = [
    "all",  # All except the rules listed below.
    "SA01",  # See Also section.
    "SA04",  # We don't use descriptions with See Also.
    "EX01",  # Example section.
    "SS06",  # Summary can go into second line.
    "GL01",  # Summary text can start on same line as """
    "GL08",  # Do not require docstring.
    "ES01",  # No extended summary required.
    "RT01",  # Unfortunately our @property trigger this.
    "RT02",  # Does not want named return value. DM style says we do.
    "SS05",  # pydocstyle is better at finding infinitive verb.
]

# Pytest configuration required to prevent pytest from looking for
# configurations in parent directories. Can be empty.
[tool.pytest.ini_options]
